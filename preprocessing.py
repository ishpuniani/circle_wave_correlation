# -*- coding: utf-8 -*-
"""A3_PlayerPotential.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11tbEn_BE484GmsARctF-8miCb1Vv9zjK
"""

# !pip install category-encoders

import numpy as np
import pandas as pd
import category_encoders as ce
from sklearn.preprocessing import OneHotEncoder, StandardScaler 
import matplotlib.pyplot as plt

file_path = '/content/drive/My Drive/Colab Notebooks/DataVisualisation/players_20_temp.csv'

df = pd.read_csv(file_path)
df.head()

df = pd.read_csv(file_path)
df['wage_eur'] = df['wage_eur'].replace(0, pd.NA)
df['value_eur'] = df['value_eur'].replace(0, pd.NA)
df['player_positions'] = df['player_positions'].str.split(', ')
# df['player_positions'] = df['player_positions'].str.split(', ',expand=True) # to choose the first position only
df[['att_work_rate','def_work_rate']] = df['work_rate'].str.split('/', expand=True)
df['growth'] = df['potential'] - df['overall']
df.head(10)

df.isnull().sum()

# fill NaNs

df = df.sort_values(["overall", "age"], ascending = (False, True))
df['wage_eur'] = df['wage_eur'].ffill()
df['value_eur'] = df['value_eur'].ffill()
df['release_clause_eur'] = df['release_clause_eur'].ffill()
# df['release_clause_eur'].fillna(df['release_clause_eur'].mean(), inplace=True)
df['contract_valid_until'].fillna(2021, inplace=True)
df['team_jersey_number'].fillna(df['nation_jersey_number'], inplace=True)
df.drop(columns=['nation_jersey_number', 'work_rate'], inplace=True)

df.isnull().sum()

# explode player_positions into separate rows

df = df.explode('player_positions')
df.head(10)

df_gk = df.loc[df['player_positions']=='GK', :]
df_gk = df_gk.drop(columns=['pace', 'shooting','passing','dribbling','defending','physic'])
# df_gk.to_csv('gk.csv', index=False)
df_gk.head(10)

df_outfield = df.loc[df['player_positions']!='GK', :]
df_outfield = df_outfield.drop(columns=['gk_diving', 'gk_handling','gk_kicking','gk_reflexes','gk_speed','gk_positioning'])
# df_outfield.to_csv('outfield_exploded.csv', index=False)
df_outfield.head(10)

targetEncCols = ['nationality', 'club','player_positions','contract_valid_until','att_work_rate','def_work_rate']
ce_targetEncoder = ce.TargetEncoder()

oneHotEncCols = ['preferred_foot']

df_num = df.copy()
df_num[targetEncCols] = ce_targetEncoder.fit_transform(df_num[targetEncCols], df_num['growth'])
df_num = pd.get_dummies(df_num,columns=oneHotEncCols,prefix=oneHotEncCols)
df_num.head(10)

# splitting outfield and goalkeepers

df_gk_num = df_num.loc[df['pace'].isnull(), :]
df_gk_num = df_gk_num.drop(columns=['pace', 'shooting','passing','dribbling','defending','physic','player_url'])
# df_gk.to_csv('gk_num.csv', index=False)
df_gk_num.head(10)

df_outfield_num = df_num.loc[df['gk_diving'].isnull(), :]
df_outfield_num = df_outfield_num.drop(columns=['gk_diving', 'gk_handling','gk_kicking','gk_reflexes','gk_speed','gk_positioning','player_url'])
# df_outfield_num.to_csv('outfield_exploded_num.csv', index=False)
df_outfield_num.head(10)

# function to scale and plot corr matrix
def standard_scale(dataset):
    df = dataset.copy(deep=True)   
    data = df.values
    scaler = StandardScaler()
    scaler.fit(data)
    data_scaled = scaler.transform(data)
    df = pd.DataFrame(data_scaled)
    df.columns = dataset.columns
    return df


def plot_corr_matrix(dataset):
    df = dataset.copy(deep=True)
    
    # scale data
    data = df.values
    scaler = StandardScaler()
    scaler.fit(data)
    data_scaled = scaler.transform(data)
    df = pd.DataFrame(data_scaled)

    # calculate correlation matrix
    corr = df.corr()
    corr.style.background_gradient(cmap='coolwarm').set_precision(2)
    fig, ax = plt.subplots(figsize=(df.columns.size, df.columns.size))
    ax.matshow(corr)
    plt.xticks(range(len(corr.columns)), dataset.columns, rotation=90)
    plt.yticks(range(len(corr.columns)), dataset.columns)
    plt.savefig('plot_scaled.png')
    plt.show()

plot_corr_matrix(df_outfield_num)

outfield_corr = df_outfield_num.corr()
outfield_corr.head(10)

df_outfield_norm = standard_scale(df_outfield_num)
outfield_norm_corr = df_outfield_norm.corr()
outfield_norm_corr.head(10)

gk_corr = df_gk_num.corr()
gk_corr.to_csv('gk_corr.csv', index=False)